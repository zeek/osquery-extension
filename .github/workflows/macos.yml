name: macOS

on:
  push:
    branches:
      - '*'

    tags:
      - 'v*'

  pull_request:
    branches:
      - '*'

jobs:
  macos_build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macOS-10.15]
        build_type: [Release, Debug]
        zeek_version: ['3.0', '3.1']

    steps:
    - uses: actions/checkout@v2

    - name: Select the CMake version
      id: cmake_version
      run: echo ::set-output name=VALUE::3.17.0

    - name: Select the osquery version
      id: osquery_version
      run: echo ::set-output name=VALUE::4.2.0

    - name: Select the sanitizers setting
      id: sanitizers_settings
      run: |
        if [[ "${{ matrix.build_type }}" == "Debug" ]] ; then
          echo ::set-output name=VALUE::true
        else
          echo ::set-output name=VALUE::false
        fi

    - name: Acquire the osquery source code
      run: |
        git clone --branch "${{ steps.osquery_version.outputs.VALUE }}" https://github.com/osquery/osquery osquery
        mkdir -p osquery/.git/modules

    - name: Update the osquery/bzip2 submodule
      run: |
        sed -i.bak 's=https://sourceware.org/git/bzip2.git=https://github.com/osquery/third-party-bzip2=g' "osquery/.gitmodules"
        rm osquery/.gitmodules.bak

    - name: Update the osquery/OpenSSL 1.0.2t download link
      run: |
        sed -i.bak 's=https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz=https://www.openssl.org/source/old/1.0.2/openssl-1.0.2t.tar.gz=g' "osquery/libraries/cmake/formula/openssl/CMakeLists.txt"
        rm "osquery/libraries/cmake/formula/openssl/CMakeLists.txt.bak"

    - name: Generate the cache key
      id: cache_key
      run: echo ::set-output name=VALUE::${{ matrix.os }}_type-${{ matrix.build_type }}_cmake-${{ steps.cmake_version.outputs.VALUE }}_zeek-version-${{ matrix.zeek_version }}

    - name: Update the cache (ccache)
      uses: actions/cache@v1.0.3
      with:
        path: ccache
        key: ${{ steps.cache_key.outputs.VALUE }}_ccache

    - name: Update the cache (Downloads)
      uses: actions/cache@v1.0.3
      with:
        path: downloads
        key: ${{ steps.cache_key.outputs.VALUE }}_downloads

    - name: Update the cache (git submodules - Zeek Agent)
      uses: actions/cache@v1.0.3
      with:
        path: .git/modules
        key: ${{ steps.cache_key.outputs.VALUE }}_zeekagent_gitsubmodules

    - name: Update the cache (git submodules - osquery)
      uses: actions/cache@v1.0.3
      with:
        path: osquery/.git/modules
        key: ${{ steps.cache_key.outputs.VALUE }}_osquery_gitsubmodules

    - name: Create the build folders
      run: mkdir -p ccache build install downloads package

    - name: Synchronize the submodules
      run: git submodule sync --recursive

    - name: Update the submodules
      run: git submodule update --init --recursive

    - name: Install system dependencies
      run: brew install cppcheck ccache flex bison doxygen ninja graphviz coreutils

    - name: Install CMake
      id: cmake_installer
      run: |
        if [ ! -f downloads/cmake.tar.gz ] ; then
          curl -L "https://github.com/Kitware/CMake/releases/download/v${{ steps.cmake_version.outputs.VALUE }}/cmake-${{ steps.cmake_version.outputs.VALUE }}-Darwin-x86_64.tar.gz" -o downloads/cmake.tar.gz
        fi

        tar xzf downloads/cmake.tar.gz
        echo ::set-output name=CMAKE_BINARY::$(realpath $(find cmake* -type d -name bin)/cmake)

    - name: Link the Zeek Agent source folder inside the osquery source tree
      run: ln -s "$(pwd)" "$(realpath osquery)/external/extension_zeek-agent"

    - name: Configure the project
      run: |
        export CCACHE_DIR="$(realpath ccache)"
        ( cd build && "${{ steps.cmake_installer.outputs.CMAKE_BINARY }}" -G Ninja -DOSQUERY_NO_DEBUG_SYMBOLS:BOOL=true -DCMAKE_INSTALL_PREFIX:PATH="/usr" -DCMAKE_BUILD_TYPE:STRING="${{ matrix.build_type }}" -DZEEK_AGENT_ENABLE_DOCUMENTATION:BOOL=true -DZEEK_AGENT_ENABLE_INSTALL:BOOL=true -DZEEK_AGENT_ENABLE_TESTS:BOOL=true -DZEEK_AGENT_ENABLE_SANITIZERS:BOOL="${{ steps.sanitizers_settings.outputs.VALUE }}" -DZEEK_AGENT_ZEEK_COMPATIBILITY:STRING="${{ matrix.zeek_version }}" ../osquery )

    - name: Build the project
      run: |
        export CCACHE_DIR="$(realpath ccache)"
        ( cd build && cmake --build . -- -v)

    - name: Build the documentation
      run: ( cd build && cmake --build . --target doxygen -- -v )

    - name: Run the tests
      run: |
        export ASAN_OPTIONS=detect_container_overflow=0
        ( cd build && cmake --build . --target zeek_agent_tests -- -v )

    - name: Install the project
      run: |
        export DESTDIR="$(realpath install)"
        ( cd build && cmake --build . --target install -- -v )

    - name: Configure the packaging project
      run: |
        export ZEEK_AGENT_INSTALL_PATH="$(realpath install)"
        ( cd package && ${{ steps.cmake_installer.outputs.CMAKE_BINARY }} -G Ninja -DZEEK_AGENT_ZEEK_COMPATIBILITY:STRING="${{ matrix.zeek_version }}" -DZEEK_AGENT_INSTALL_PATH:PATH="${ZEEK_AGENT_INSTALL_PATH}" -DCMAKE_INSTALL_PREFIX:PATH="/usr" ../packaging )

    - name: Build the packages
      run: |
        export DESTDIR="$(realpath install)"
        ( cd package && cmake --build . --target package -- -v )

    - name: Locate the packages
      id: package_locations
      run: echo ::set-output name=TARGZ_PACKAGE_PATH::$(ls package/*.tar.gz)

    - name: Store the .tar.gz package artifact
      uses: actions/upload-artifact@v1
      with:
        name: macos_targz_package-${{ matrix.build_type }}-${{ matrix.zeek_version }}
        path: ${{ steps.package_locations.outputs.TARGZ_PACKAGE_PATH }}

  macos_packaging:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: macos_build
    runs-on: macOS-10.15

    steps:
      - name: Download the TARGZ package from the macos_build job (Release, Zeek 3.0)
        uses: actions/download-artifact@v1
        with:
          name: macos_targz_package-Release-3.0

      - name: Download the TARGZ package from the macos_build job (Release, Zeek 3.1)
        uses: actions/download-artifact@v1
        with:
          name: macos_targz_package-Release-3.1

      - name: Locate the Zeek 3.0 packages
        id: zeek30_package_locations
        run: |
          echo ::set-output name=TARGZ_PACKAGE_PATH::$(ls macos_targz_package-Release-3.0/*.tar.gz)
          echo ::set-output name=TARGZ_ASSET_NAME::zeek30_$(cd macos_targz_package-Release-3.0 && ls *.tar.gz)

      - name: Locate the Zeek 3.1 packages
        id: zeek31_package_locations
        run: |
          echo ::set-output name=TARGZ_PACKAGE_PATH::$(ls macos_targz_package-Release-3.1/*.tar.gz)
          echo ::set-output name=TARGZ_ASSET_NAME::zeek31_$(cd macos_targz_package-Release-3.1 && ls *.tar.gz)

      - name: Draft the new release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload the Zeek 3.0 .tar.gz package
        id: upload_targz_package_zeek30
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.zeek30_package_locations.outputs.TARGZ_PACKAGE_PATH }}
          asset_name: ${{ steps.zeek30_package_locations.outputs.TARGZ_ASSET_NAME }}
          asset_content_type: application/gzip

      - name: Upload the Zeek 3.1 .tar.gz package
        id: upload_targz_package_zeek31
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.zeek31_package_locations.outputs.TARGZ_PACKAGE_PATH }}
          asset_name: ${{ steps.zeek31_package_locations.outputs.TARGZ_ASSET_NAME }}
          asset_content_type: application/gzip
