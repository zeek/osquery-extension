name: LinuxBuild

on:
  push:
    branches:
      - '*'

  pull_request:
    branches:
      - '*'

jobs:
  linux_build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04]
        build_type: [Release, Debug]
        zeek_version: [3.0, 3.1]

    steps:
    - uses: actions/checkout@v1

    - name: Select the osquery-toolchain version
      id: osquery_toolchain_version
      run: echo ::set-output name=VALUE::1.0.0

    - name: Select the CMake version
      id: cmake_version
      run: echo ::set-output name=VALUE::3.16.1

    - name: Select the osquery version
      id: osquery_version
      run: echo ::set-output name=VALUE::4.1.1

    - name: Generate the cache key
      id: cache_key
      run: echo ::set-output name=VALUE::build_${{ matrix.os }}_type-${{ matrix.build_type }}_osquery-toolchain-${{ steps.osquery_toolchain_version.outputs.VALUE }}_cmake-${{ steps.cmake_version.outputs.VALUE }}_zeek-version-${{  steps.zeek_version.outputs.VALUE }}

    - name: Update the cache (ccache)
      uses: actions/cache@v1.0.3
      with:
        path: ccache
        key: ${{ steps.cache_key.outputs.VALUE }}_ccache

    - name: Update the cache (Downloads)
      uses: actions/cache@v1.0.3
      with:
        path: downloads
        key: ${{ steps.cache_key.outputs.VALUE }}_downloads

    - name: Update the cache (git submodules)
      uses: actions/cache@v1.0.3
      with:
        path: .git/modules
        key: ${{ steps.cache_key.outputs.VALUE }}_gitsubmodules

    - name: Create the build folders
      run: mkdir -p ccache build install downloads package

    - name: Synchronize the submodules
      run: git submodule sync --recursive

    - name: Update the submodules
      run: git submodule update --init --recursive

    - name: Install the osquery-toolchain
      id: osquery_toolchain_installer
      run: |
        if [ ! -f downloads/osquery-toolchain.tar.xz ] ; then
          curl -L "https://github.com/osquery/osquery-toolchain/releases/download/${{ steps.osquery_toolchain_version.outputs.VALUE }}/osquery-toolchain-${{ steps.osquery_toolchain_version.outputs.VALUE }}.tar.xz" -o downloads/osquery-toolchain.tar.xz
        fi

        tar xf downloads/osquery-toolchain.tar.xz
        echo ::set-output name=PATH::$(realpath osquery-toolchain)

    - name: Install system dependencies
      run: sudo apt-get install clang clang-tidy-8 cppcheck ccache curl libssl-dev flex bison rpm doxygen ninja-build -y

    - name: Install CMake
      id: cmake_installer
      run: |
        if [ ! -f downloads/cmake.tar.gz ] ; then
          curl -L "https://github.com/Kitware/CMake/releases/download/v${{ steps.cmake_version.outputs.VALUE }}/cmake-${{ steps.cmake_version.outputs.VALUE }}-Linux-x86_64.tar.gz" -o downloads/cmake.tar.gz
        fi

        tar xzf downloads/cmake.tar.gz
        echo ::set-output name=CMAKE_BINARY::$(realpath $(find cmake* -type d -name bin)/cmake)

    - name: Acquire the osquery source code
      run: git clone --branch "${{ steps.osquery_version.outputs.VALUE }}" https://github.com/osquery/osquery

    - name: Link the Zeek Agent source folder inside the osquery source tree
      run: ln -s "$(pwd)" "$(realpath osquery)/external/extension_zeek-agent"

    - name: Configure the project
      run: |
        export CCACHE_DIR="$(realpath ccache)"
        ( cd build && "${{ steps.cmake_installer.outputs.CMAKE_BINARY }}" -G Ninja -DOSQUERY_TOOLCHAIN_SYSROOT:PATH="${{ steps.osquery_toolchain_installer.outputs.PATH }}" -DCMAKE_INSTALL_PREFIX:PATH="/usr" -DCMAKE_BUILD_TYPE:STRING="${{ matrix.build_type }}" -DZEEK_AGENT_ENABLE_DOCUMENTATION:BOOL=true -DZEEK_AGENT_ENABLE_INSTALL:BOOL=true -DZEEK_AGENT_ENABLE_TESTS:BOOL=true -DZEEK_AGENT_ENABLE_SANITIZERS:BOOL=true -DZEEK_AGENT_ZEEK_COMPATIBILITY:STRING="${{ matrix.zeek_version }}" ../osquery )

    - name: Build the project
      run: |
        export CCACHE_DIR="$(realpath ccache)"
        ( cd build && cmake --build . -- -v)

    - name: Build the documentation
      run: ( cd build && cmake --build . --target doxygen -- -v )

    - name: Run the tests
      run: |
        export ASAN_OPTIONS=detect_container_overflow=0
        ( cd build && cmake --build . --target zeek_agent_tests -- -v )

    - name: Install the project
      run: |
        export DESTDIR="$(realpath install)"
        ( cd build && cmake --build . --target install -- -v )

    - name: Configure the packaging project
      run: |
        export ZEEK_AGENT_INSTALL_PATH="$(realpath install)"
        ( cd package && ${{ steps.cmake_installer.outputs.CMAKE_BINARY }} -G Ninja -DZEEK_AGENT_ZEEK_COMPATIBILITY:STRING="${{ matrix.zeek_version }}" -DZEEK_AGENT_INSTALL_PATH:PATH="${ZEEK_AGENT_INSTALL_PATH}" -DCMAKE_INSTALL_PREFIX:PATH="/usr" ../packaging )

    - name: Build the packages
      run: |
        export DESTDIR="$(realpath install)"
        ( cd package && cmake --build . --target package -- -v )

    - name: Locate the packages
      id: package_locations
      run: |
        echo ::set-output name=DEB_PACKAGE_PATH::$(ls package/*.deb)
        echo ::set-output name=RPM_PACKAGE_PATH::$(ls package/*.rpm)
        echo ::set-output name=TARGZ_PACKAGE_PATH::$(ls package/*.tar.gz)

    - name: Store the .deb package artifact
      uses: actions/upload-artifact@v1
      with:
        name: deb_package-${{ matrix.build_type }}-${{ matrix.zeek_version }}
        path: ${{ steps.package_locations.outputs.DEB_PACKAGE_PATH }}

    - name: Store the .rpm package artifact
      uses: actions/upload-artifact@v1
      with:
        name: rpm_package-${{ matrix.build_type }}-${{ matrix.zeek_version }}
        path: ${{ steps.package_locations.outputs.RPM_PACKAGE_PATH }}

    - name: Store the .tar.gz package artifact
      uses: actions/upload-artifact@v1
      with:
        name: targz_package-${{ matrix.build_type }}-${{ matrix.zeek_version }}
        path: ${{ steps.package_locations.outputs.TARGZ_PACKAGE_PATH }}
